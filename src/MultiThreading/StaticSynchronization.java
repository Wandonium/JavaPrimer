package MultiThreading;

import java.util.UUID;

class Bracket {

    // use static variable instead
    //private String threadCode;
    private static UUID threadCode;

    public Bracket(UUID threadCode) {
        super();
        this.threadCode = threadCode;
    }

    // make method as static to avoid multiple threads
    // accessing threadCode at the same time...
    synchronized static public void generate() {
        for(int i=0; i<=10; i++) {
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            if(i<=5) {
                System.out.print("[");
            } else {
                System.out.print("]");
            }
        }
        System.out.println("Generated by thread code: " + threadCode);
    }
}
public class StaticSynchronization {

    public static void main(String[] args) {
        generateBrackets();
    }
    public static void generateBrackets() {
        Bracket bracket1 = new Bracket(UUID.randomUUID());
        Bracket bracket2 = new Bracket(UUID.randomUUID());
        new Thread(new Runnable() {
            @Override
            public void run() {
                for(int i=1; i<=5; i++) {
                    bracket1.generate();
                }
            }
        }).start();
        new Thread(new Runnable() {
            @Override
            public void run() {
                long startTime = System.currentTimeMillis();
                for(int i=1; i<=5; i++) {
                    bracket2.generate();
                }
            }
        }).start();
    }
}
